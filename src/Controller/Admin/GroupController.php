<?php

namespace App\Controller\Admin;

use App\Entity\Group;
use App\Entity\User;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Config\Option\EA;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class GroupController extends AbstractAdminController
{
    public static function getEntityFqcn(): string
    {
        return Group::class;
    }

    final public function getConfigurableFields(string $pageName): array
    {
        $fields = parent::getConfigurableFields($pageName);

        $fields[] = TextField::new('title')
            ->hideOnDetail();

        if (Crud::PAGE_DETAIL !== $pageName) {
            $membersField = AssociationField::new('members')
                ->setCrudController(UserController::class)
                ->autocomplete();
        } else {
            $membersField = CollectionField::new('members');

            $membersField->formatValue(function ($value) {
                $links = array_map(function (User $user) {
                    $url = $this->adminUrlGenerator
                        ->setController(UserController::class)
                        ->setAction(Action::DETAIL)
                        ->setEntityId($user->getId())
                        ->unset(EA::FILTERS)
                        ->unset(EA::PAGE)
                        ->unset(EA::QUERY)
                        ->unset(EA::SORT)
                        ->generateUrl();

                    return sprintf('<a href="%s">%s</a>', $url, $user->getUserIdentifier());
                }, $value->toArray());

                return implode(', ', $links);
            });
        }
        $fields[] = $membersField;

        $statusField = BooleanField::new('status');
        if (Crud::PAGE_INDEX === $pageName) {
            $statusField->renderAsSwitch(false);
        }

        $fields[] = $statusField;

        return $fields;
    }

    final public function configureFilters(Filters $filters): Filters
    {
        $filters = parent::configureFilters($filters);

        return $filters
            ->add('title')
            ->add('status')
            ->add('members');
    }

    final public function configureCrud(Crud $crud): Crud
    {
        $crud->setPageTitle(Crud::PAGE_EDIT, function ($entityInstance) {
            return sprintf('Edit "%s"', $entityInstance->getTitle());
        });

        $crud->setPageTitle(Crud::PAGE_DETAIL, function ($entityInstance) {
            return $entityInstance->getTitle();
        });

        return parent::configureCrud($crud); // TODO: Change the autogenerated stub
    }

    final public function configureActions(Actions $actions): Actions
    {
        $groupAvailability = Action::new(
            'showGroupAvailability',
            'Show availabilities',
        )
            ->linkToUrl(function (Group $group) {
                return $this
                    ->adminUrlGenerator
                    ->setAction(Action::INDEX)
                    ->set('filters[group][value][]', $group->getId())
                    ->set('filters[group][comparison]', '=')
                    ->generateUrl();
            });

        $actions->add(Crud::PAGE_INDEX, $groupAvailability);
        $actions->add(Crud::PAGE_DETAIL, $groupAvailability);
        $actions->add(Crud::PAGE_EDIT, $groupAvailability);

        $groupEvents = Action::new(
            'showGroupEvents',
            'Show events',
        )
            ->linkToUrl(function (Group $group) {
                return $this
                    ->adminUrlGenerator
                    ->setController(EventController::class)
                    ->setAction(Action::INDEX)
                    ->set('filters[group][value][]', $group->getId())
                    ->set('filters[group][comparison]', '=')
                    ->generateUrl();
            });

        $actions->add(Crud::PAGE_INDEX, $groupEvents);
        $actions->add(Crud::PAGE_DETAIL, $groupEvents);
        $actions->add(Crud::PAGE_EDIT, $groupEvents);

        return parent::configureActions($actions);
    }
}
